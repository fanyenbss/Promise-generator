Promise：
1.解决异步
2.状态

------------------------------------------------------------------------------

Promise解决异步：
1.成功-resolve
2.失败-reject

单独用——几乎没用

------------------------------------------------------------------------------

ajax({
  url: '/getBanner',
  success(){
    ajax({
      url: '/getCurrUser',
      success(){
        ajax({
          url: '/getCart',
          success(){
            ...
          },
          error(){

          }
        })
      },
      error(){

      }
    })
  },
  error(){

  }
});

------------------------------------------------------------------------------

总结：
1.2种状态——resolve、reject
2.基本写法
  let obj=new Promise((resolve, reject)=>{});
  obj.then(成功, 失败);
3.all用法
  Promise.all([obj1, obj2, ...]).then(全部成功, 有失败的);
4.$.ajax
  $.ajax({})=>Promise对象

整合在一起
  Promise.all([$.ajax, $.ajax, ...]).then(成功, 失败);

------------------------------------------------------------------------------

all   全都完成
race  竞速-只取第一名

------------------------------------------------------------------------------

Promise(承诺)：
承诺状态只要改变了，就绝对不会再变

------------------------------------------------------------------------------

初始 ->成功
     ->失败

------------------------------------------------------------------------------

一次性——每次new一个

==============================================================================

generator：生成器

函数->从头执行到尾

generator函数->
  *大函数=>生成=>一堆小函数

------------------------------------------------------------------------------

generator函数->生成一堆小函数

function *show(){
  读取banner
  读取users
  读取购物车

  使用数据
}

show()=>
  fn1->function (){
    读取banner
  }
  fn2->function (){
    读取users
  }
  fn3->function (){
    读取购物车
  }
  fn4->function (){
    使用数据
  }

  fn1()=>fn2()=>fn3()=>fn4()

------------------------------------------------------------------------------

generator函数：
生成一堆小函数；一个一个执行
yield分段

------------------------------------------------------------------------------

yield：
1.传参
2.返回

------------------------------------------------------------------------------

for...of循环+配合迭代器
  迭代器->gen对象
